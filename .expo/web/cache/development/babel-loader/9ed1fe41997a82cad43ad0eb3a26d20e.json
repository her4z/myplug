{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\proyectos\\\\MyIdealPlug\\\\app\\\\components\\\\login.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport stylesLogin from \"../styles/login_css\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Font from 'expo-font';\nimport { Button } from 'react-native-elements';\n\nvar Login = function (_React$Component) {\n  _inherits(Login, _React$Component);\n\n  var _super = _createSuper(Login);\n\n  function Login() {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      user: '',\n      password: '',\n      isButtonLoading: false,\n      fontsLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadFonts();\n    }\n  }, {\n    key: \"loadFonts\",\n    value: function loadFonts() {\n      return _regeneratorRuntime.async(function loadFonts$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                'Raleway-Light': {\n                  uri: require(\"../assets/fonts/Raleway-Light.ttf\")\n                },\n                'Raleway-Medium': {\n                  uri: require(\"../assets/fonts/Raleway-Medium.ttf\")\n                },\n                'Roboto-Regular': {\n                  uri: require(\"../assets/fonts/Roboto-Regular.ttf\")\n                }\n              }));\n\n            case 2:\n              this.setState({\n                fontsLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.fontsLoaded === true) {\n        return React.createElement(View, {\n          style: stylesLogin.login,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }\n        }, React.createElement(Image, {\n          source: require(\"../assets/logo1.png\"),\n          style: stylesLogin.logo,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 21\n          }\n        }), React.createElement(Text, {\n          style: stylesLogin.brand,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }\n        }, \"My Plug\"), React.createElement(TextInput, {\n          style: stylesLogin.textinputUser,\n          placeholder: \" User\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }\n        }), React.createElement(TextInput, {\n          style: stylesLogin.textinputPassword,\n          placeholder: \" Password\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 21\n          }\n        }), React.createElement(View, {\n          style: stylesLogin.buttonLogin,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }\n        }, React.createElement(Button, {\n          title: \"Log in\",\n          type: \"solid\",\n          loading: this.state.isButtonLoading,\n          onPress: function onPress() {\n            return _this2.setState({\n              isButtonLoading: true\n            });\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }\n        })));\n      }\n    }\n  }]);\n\n  return Login;\n}(React.Component);\n\nexport default Login;","map":{"version":3,"sources":["D:/proyectos/MyIdealPlug/app/components/login.tsx"],"names":["React","stylesLogin","Font","Button","Login","state","user","password","isButtonLoading","fontsLoaded","loadFonts","loadAsync","uri","require","setState","login","logo","brand","textinputUser","textinputPassword","buttonLogin","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP;;;;;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAEA,SAASC,MAAT,QAAuB,uBAAvB;;IAEMC,K;;;;;;;;;;;;;;;UAEFC,K,GAAM;AACFC,MAAAA,IAAI,EAAE,EADJ;AAEFC,MAAAA,QAAQ,EAAE,EAFR;AAGFC,MAAAA,eAAe,EAAE,KAHf;AAIFC,MAAAA,WAAW,EAAE;AAJX,K;;;;;;wCAOa;AACf,WAAKC,SAAL;AACH;;;;;;;;;+CAGSR,IAAI,CAACS,SAAL,CAAe;AACjB,iCAAgB;AACZC,kBAAAA,GAAG,EAAEC,OAAO;AADA,iBADC;AAIjB,kCAAiB;AACbD,kBAAAA,GAAG,EAAEC,OAAO;AADC,iBAJA;AAOjB,kCAAiB;AACbD,kBAAAA,GAAG,EAAEC,OAAO;AADC;AAPA,eAAf,C;;;AAWN,mBAAKC,QAAL,CAAc;AACVL,gBAAAA,WAAW,EAAE;AADH,eAAd;;;;;;;;;;;6BAKI;AAAA;;AACJ,UAAG,KAAKJ,KAAL,CAAWI,WAAX,KAA2B,IAA9B,EAAmC;AAC/B,eACI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAER,WAAW,CAACc,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,KAAD;AAAO,UAAA,MAAM,EAAEF,OAAO,uBAAtB;AAA+C,UAAA,KAAK,EAAEZ,WAAW,CAACe,IAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEf,WAAW,CAACgB,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,EAGI,oBAAC,SAAD;AAAW,UAAA,KAAK,EAAEhB,WAAW,CAACiB,aAA9B;AAA6C,UAAA,WAAW,EAAC,OAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHJ,EAII,oBAAC,SAAD;AAAW,UAAA,KAAK,EAAEjB,WAAW,CAACkB,iBAA9B;AAAiD,UAAA,WAAW,EAAC,WAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJJ,EAKI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAElB,WAAW,CAACmB,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,QAAd;AAAuB,UAAA,IAAI,EAAC,OAA5B;AAAoC,UAAA,OAAO,EAAE,KAAKf,KAAL,CAAWG,eAAxD;AAAyE,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACM,QAAL,CAAc;AAACN,cAAAA,eAAe,EAAE;AAAlB,aAAd,CAAN;AAAA,WAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CALJ,CADJ;AAWH;AACJ;;;;EA5CeR,KAAK,CAACqB,S;;AA8C1B,eAAejB,KAAf","sourcesContent":["import React from 'react';\r\nimport stylesLogin from '../styles/login_css';\r\nimport { View, TextInput, Image, Text} from 'react-native';\r\nimport * as Font from 'expo-font';\r\n// import { useNavigation } from '@react-navigation/native';\r\nimport { Button } from 'react-native-elements';\r\n\r\nclass Login extends React.Component {\r\n\r\n    state={\r\n        user: '',\r\n        password: '',\r\n        isButtonLoading: false,\r\n        fontsLoaded: false\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.loadFonts();\r\n    }\r\n\r\n    async loadFonts(){\r\n        await Font.loadAsync({\r\n            'Raleway-Light':{\r\n                uri: require('../assets/fonts/Raleway-Light.ttf')\r\n            },\r\n            'Raleway-Medium':{\r\n                uri: require('../assets/fonts/Raleway-Medium.ttf')\r\n            },\r\n            'Roboto-Regular':{\r\n                uri: require('../assets/fonts/Roboto-Regular.ttf')\r\n            }\r\n        });\r\n        this.setState({\r\n            fontsLoaded: true\r\n        });\r\n    }\r\n\r\n    render(){\r\n        if(this.state.fontsLoaded === true){\r\n            return(\r\n                <View style={stylesLogin.login}>\r\n                    <Image source={require('../assets/logo1.png')} style={stylesLogin.logo}></Image>\r\n                    <Text style={stylesLogin.brand}>My Plug</Text>\r\n                    <TextInput style={stylesLogin.textinputUser} placeholder=\" User\"></TextInput>\r\n                    <TextInput style={stylesLogin.textinputPassword} placeholder=\" Password\"></TextInput>\r\n                    <View style={stylesLogin.buttonLogin}>\r\n                        <Button title=\"Log in\" type=\"solid\" loading={this.state.isButtonLoading} onPress={() => this.setState({isButtonLoading: true})}></Button>\r\n                    </View>\r\n                </View>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default Login"]},"metadata":{},"sourceType":"module"}